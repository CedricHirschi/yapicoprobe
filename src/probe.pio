/*
 * The MIT License (MIT)
 *
 * Copyright (c) 2021 Raspberry Pi (Trading) Ltd.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 *
 */

// Output frequency is PIO clock / 6 (therefor the delay [2])
// PIO clock is set to a high frequency to keep the timing effects of the instructions outside the shift loops small
// BUT take care of maximum frequency / minimum divisor:
//      Effective frequency is sysclk/(int + frac/256). Value of 0 is interpreted as 65536. If INT is 0, FRAC must also be 0.
//
// Sideset pin0 is SWDIR, pin1 is SWCLK

// The following code has been mainly taken from https://github.com/essele/pico_debug/blob/main/swd.pio

    .program probe
    
    .side_set 2 opt                                ; side set SWCLK


; The default approach is to just accept jump targets in the FIFO so they effectively
; become a series of function calls, each function can then process arguments as needed
; The jump target is 8 bits (the least significant 8)

public start:
    out pc, 8


; // OUTPUT //

; Using a single control word sends up to 16 bits (ok, 18) of data. The first 8 will be the jump
; target (i.e. to here), then 5 to say how many bits, then up to 16 bits of data to send

public short_output:
    out x, 5
    set pindirs, 1              side 1
bulk_out_loop:
    out pins, 1                 side 1 [2]
    jmp x--, bulk_out_loop      side 3 [2]
    set pins, 1                 side 1
    out NULL, 32                                  ; clear anything not sent
    jmp start


; // INPUT //

; Reads in a certain number of bits and pushes the last 32bit into the FIFO

public input:
    out x, 24
public in_jmp:
    set pindirs, 0              side 0
bulk_in_loop:
    in pins, 1                  side 2 [2]
    jmp x--, bulk_in_loop       side 0 [2]
    push
    jmp start
